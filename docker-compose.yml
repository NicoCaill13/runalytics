services:
  postgres:
    image: postgres:16-alpine
    container_name: runalytics-postgres
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - runalytics_db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      runalytics_net:
        ipv4_address: 172.15.0.10

  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    container_name: runalytics-api
    restart: unless-stopped
    env_file:
      - .env
    environment:
      # Dans le réseau docker, l’hôte DB est "postgres"
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?schema=public
      NODE_ENV: development
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "3000:3000"
    volumes:
      - ./:/usr/src/app
      - /usr/src/app/node_modules
    command: sh -c "npx prisma generate && npm run start:dev"
    networks:
      runalytics_net:
        ipv4_address: 172.15.0.20

volumes:
  runalytics_db:

networks:
  runalytics_net:
    name: runalytics_net
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.15.0.0/16