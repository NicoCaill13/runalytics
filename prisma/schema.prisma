datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum RunnerType {
    PLEASURE
    PROGRESS
    COMPETITOR
}

enum CoachPersonality {
    COOL
    MODERATE
    COMPET
}

model User {
    id           String  @id @default(cuid())
    athleteId    Int?    @unique
    userName     String?
    accessToken  String?
    refreshToken String?

    hasHeartRateData  Boolean? @default(false)
    heartRateCoverage Float?
    heartRateStatus   String?

    sex             String? // 'M' | 'F'
    profile         String? // large
    profileMedium   String?
    city            String?
    state           String?
    country         String?
    measurementPref String? // 'meters' | 'feet'
    isPremium       Boolean? // Strava Summit/Premium

    fcm         Int?
    fcrepos     Int?
    zones       Json?
    hrUpdatedAt DateTime?

    vmaMps       Float?
    vmaUpdatedAt DateTime?

    // Profil coureur & coach
    runnerType       RunnerType?
    coachPersonality CoachPersonality @default(MODERATE)

    age Int?

    expiresAt DateTime?

    lastSyncedAt   DateTime?
    lastActivityAt DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    activities     Activity[]
    WeeklyFeatures WeeklyFeatures[]
}

model Activity {
    id          String   @id @default(cuid())
    userId      String
    providerId  String   @unique // id Strava
    dateUtc     DateTime
    dateLocal   DateTime
    distanceM   Int
    movingTimeS Int
    elevGainM   Int
    sport       String
    avgHr       Int?
    maxHr       Int?
    avgCadSpm   Int?
    avgPaceSpKm Int?
    hrZone      String?
    load        Float?
    createdAt   DateTime @default(now())
    user        User     @relation(fields: [userId], references: [id])

    @@index([userId, dateUtc])
}

model WeeklyFeatures {
    id         String   @id @default(cuid())
    userId     String
    year       Int // ex: 2025
    weekNumber Int // ex: 2
    weekStart  DateTime // Lundi 00:00:00 (UTC)

    runsCount   Int
    daysActive  Int
    distanceKm  Float
    movingTimeH Float
    elevGainM   Int

    loadWeek   Float // Σ load
    monotony   Float? // mean(dayLoads)/std(dayLoads)
    strain     Float? // loadWeek * monotony
    acwr       Float? // loadWeek / mean(loadWeek des 4 sem précédentes)
    maxDayLoad Float? // AU
    max48hLoad Float?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])

    @@unique([userId, year, weekNumber])
    @@index([userId, weekStart])
}
