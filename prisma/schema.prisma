datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum RunnerType {
    PLEASURE
    PROGRESS
    COMPETITOR
}

enum CoachPersonality {
    COOL
    MODERATE
    COMPET
}

enum ValueSource {
    ESTIMATED
    USER
}

enum MetricSource {
    VMA
    FC_REPOS
    FC_MAX
    FC_RESERVE
    HRR_ZONES
    VMA_ZONES
}

enum ActivityType {
    EF
    EA
    SEUIL
    VMA
    INDOOR
}

enum IntervalRun {
    DEMICOOPER
    COOPER
}

model User {
    id           String  @id @default(cuid())
    athleteId    Int?    @unique
    userName     String?
    accessToken  String?
    refreshToken String?

    hasHeartRateData  Boolean? @default(false)
    heartRateCoverage Float?
    heartRateStatus   String?

    sex             String? // 'M' | 'F'
    profile         String? // large
    profileMedium   String?
    city            String?
    state           String?
    country         String?
    measurementPref String? // 'meters' | 'feet'
    isPremium       Boolean? // Strava Summit/Premium

    // Profil coureur & coach
    runnerType       RunnerType?
    coachPersonality CoachPersonality @default(MODERATE)

    age Int?

    expiresAt DateTime?

    lastSyncedAt   DateTime?
    lastActivityAt DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    activities     Activity[]
    WeeklyFeatures WeeklyFeatures[]
    PhysioHistory  PhysioHistory[]
}

model PhysioHistory {
    id     String @id @default(cuid())
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    metric MetricSource
    value  Decimal
    source ValueSource

    windowStart DateTime?
    windowEnd   DateTime?
    runsCount   Int?
    note        String?
    payload     Json?

    createdAt DateTime @default(now())

    @@index([userId, metric, createdAt])
}

model Activity {
    id                  String                @id @default(cuid())
    userId              String
    providerId          String                @unique // id Strava
    dateUtc             DateTime
    dateLocal           DateTime
    distanceM           Int
    movingTimeS         Int
    elevGainM           Int
    sport               String
    avgHr               Int?
    maxHr               Int?
    avgCadSpm           Int?
    avgPaceSpKm         Int?
    hrZone              String?
    load                Float?
    type                ActivityType?
    createdAt           DateTime              @default(now())
    user                User                  @relation(fields: [userId], references: [id])
    ActivityRollingBest ActivityRollingBest[]

    @@index([userId, dateUtc])
}

model ActivityRollingBest {
    id String @id @default(cuid())

    // relations
    activityId String
    activity   Activity @relation(fields: [activityId], references: [providerId], onDelete: Cascade)
    userId     String

    // Fenêtre 360 s (6')
    startOffsetS360 Int?
    endOffsetS360   Int?
    distanceM360    Int?
    speedMps360     Decimal?
    avgHr360        Int?
    dPlusM360       Int?

    // Fenêtre 720 s (12')
    startOffsetS720 Int?
    endOffsetS720   Int?
    distanceM720    Int?
    speedMps720     Decimal?
    avgHr720        Int?
    dPlusM720       Int?

    averageSpeedMps Decimal?
    averageSpeedKmh Decimal?

    createdAt DateTime @default(now())

    @@index([userId])
    @@index([activityId])
}

model WeeklyFeatures {
    id         String   @id @default(cuid())
    userId     String
    year       Int // ex: 2025
    weekNumber Int // ex: 2
    weekStart  DateTime // Lundi 00:00:00 (UTC)

    runsCount   Int
    daysActive  Int
    distanceKm  Float
    movingTimeH Float
    elevGainM   Int

    loadWeek   Float // Σ load
    monotony   Float? // mean(dayLoads)/std(dayLoads)
    strain     Float? // loadWeek * monotony
    acwr       Float? // loadWeek / mean(loadWeek des 4 sem précédentes)
    maxDayLoad Float? // AU
    max48hLoad Float?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])

    @@unique([userId, year, weekNumber])
    @@index([userId, weekStart])
}
